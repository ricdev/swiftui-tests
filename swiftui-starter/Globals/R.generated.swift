//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 41 files.
  struct file {
    /// Resource file `BrilliantCutProB7-Black.otf`.
    static let brilliantCutProB7BlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrilliantCutProB7-Black", pathExtension: "otf")
    /// Resource file `BrilliantCutProB7-Bold.otf`.
    static let brilliantCutProB7BoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrilliantCutProB7-Bold", pathExtension: "otf")
    /// Resource file `BrilliantCutProB7-Light.otf`.
    static let brilliantCutProB7LightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrilliantCutProB7-Light", pathExtension: "otf")
    /// Resource file `BrilliantCutProB7-Medium.otf`.
    static let brilliantCutProB7MediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrilliantCutProB7-Medium", pathExtension: "otf")
    /// Resource file `BrilliantCutProB7-Regular.otf`.
    static let brilliantCutProB7RegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrilliantCutProB7-Regular", pathExtension: "otf")
    /// Resource file `BrilliantCutProB7-Thin.otf`.
    static let brilliantCutProB7ThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrilliantCutProB7-Thin", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-Bold.otf`.
    static let fancyCutCondProB7BoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-Bold", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-BoldItalic.otf`.
    static let fancyCutCondProB7BoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-BoldItalic", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-Light.otf`.
    static let fancyCutCondProB7LightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-Light", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-LightItalic.otf`.
    static let fancyCutCondProB7LightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-LightItalic", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-Medium.otf`.
    static let fancyCutCondProB7MediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-Medium", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-MediumItalic.otf`.
    static let fancyCutCondProB7MediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-MediumItalic", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-Regular.otf`.
    static let fancyCutCondProB7RegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-Regular", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-RegularItalic.otf`.
    static let fancyCutCondProB7RegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-RegularItalic", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-Thin.otf`.
    static let fancyCutCondProB7ThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-Thin", pathExtension: "otf")
    /// Resource file `FancyCutCondProB7-ThinItalic.otf`.
    static let fancyCutCondProB7ThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutCondProB7-ThinItalic", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-Bold.otf`.
    static let fancyCutExtProB7BoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-Bold", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-BoldItalic.otf`.
    static let fancyCutExtProB7BoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-BoldItalic", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-Light.otf`.
    static let fancyCutExtProB7LightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-Light", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-LightItalic.otf`.
    static let fancyCutExtProB7LightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-LightItalic", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-Medium.otf`.
    static let fancyCutExtProB7MediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-Medium", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-MediumItalic.otf`.
    static let fancyCutExtProB7MediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-MediumItalic", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-Regular.otf`.
    static let fancyCutExtProB7RegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-Regular", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-RegularItalic.otf`.
    static let fancyCutExtProB7RegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-RegularItalic", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-Thin.otf`.
    static let fancyCutExtProB7ThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-Thin", pathExtension: "otf")
    /// Resource file `FancyCutExtProB7-ThinItalic.otf`.
    static let fancyCutExtProB7ThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutExtProB7-ThinItalic", pathExtension: "otf")
    /// Resource file `FancyCutProB7-Bold.otf`.
    static let fancyCutProB7BoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-Bold", pathExtension: "otf")
    /// Resource file `FancyCutProB7-BoldItalic.otf`.
    static let fancyCutProB7BoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-BoldItalic", pathExtension: "otf")
    /// Resource file `FancyCutProB7-Light.otf`.
    static let fancyCutProB7LightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-Light", pathExtension: "otf")
    /// Resource file `FancyCutProB7-LightItalic.otf`.
    static let fancyCutProB7LightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-LightItalic", pathExtension: "otf")
    /// Resource file `FancyCutProB7-Medium.otf`.
    static let fancyCutProB7MediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-Medium", pathExtension: "otf")
    /// Resource file `FancyCutProB7-MediumItalic.otf`.
    static let fancyCutProB7MediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-MediumItalic", pathExtension: "otf")
    /// Resource file `FancyCutProB7-Regular.otf`.
    static let fancyCutProB7RegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-Regular", pathExtension: "otf")
    /// Resource file `FancyCutProB7-RegularItalic.otf`.
    static let fancyCutProB7RegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-RegularItalic", pathExtension: "otf")
    /// Resource file `FancyCutProB7-Thin.otf`.
    static let fancyCutProB7ThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-Thin", pathExtension: "otf")
    /// Resource file `FancyCutProB7-ThinItalic.otf`.
    static let fancyCutProB7ThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FancyCutProB7-ThinItalic", pathExtension: "otf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")
    /// Resource file `XCTest.framework`.
    static let xcTestFramework = Rswift.FileResource(bundle: R.hostingBundle, name: "XCTest", pathExtension: "framework")
    /// Resource file `bg-dark.json`.
    static let bgDarkJson = Rswift.FileResource(bundle: R.hostingBundle, name: "bg-dark", pathExtension: "json")
    /// Resource file `swiftgen.yml`.
    static let swiftgenYml = Rswift.FileResource(bundle: R.hostingBundle, name: "swiftgen", pathExtension: "yml")

    /// `bundle.url(forResource: "BrilliantCutProB7-Black", withExtension: "otf")`
    static func brilliantCutProB7BlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brilliantCutProB7BlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrilliantCutProB7-Bold", withExtension: "otf")`
    static func brilliantCutProB7BoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brilliantCutProB7BoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrilliantCutProB7-Light", withExtension: "otf")`
    static func brilliantCutProB7LightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brilliantCutProB7LightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrilliantCutProB7-Medium", withExtension: "otf")`
    static func brilliantCutProB7MediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brilliantCutProB7MediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrilliantCutProB7-Regular", withExtension: "otf")`
    static func brilliantCutProB7RegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brilliantCutProB7RegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrilliantCutProB7-Thin", withExtension: "otf")`
    static func brilliantCutProB7ThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brilliantCutProB7ThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-Bold", withExtension: "otf")`
    static func fancyCutCondProB7BoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7BoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-BoldItalic", withExtension: "otf")`
    static func fancyCutCondProB7BoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7BoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-Light", withExtension: "otf")`
    static func fancyCutCondProB7LightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7LightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-LightItalic", withExtension: "otf")`
    static func fancyCutCondProB7LightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7LightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-Medium", withExtension: "otf")`
    static func fancyCutCondProB7MediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7MediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-MediumItalic", withExtension: "otf")`
    static func fancyCutCondProB7MediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7MediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-Regular", withExtension: "otf")`
    static func fancyCutCondProB7RegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7RegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-RegularItalic", withExtension: "otf")`
    static func fancyCutCondProB7RegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7RegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-Thin", withExtension: "otf")`
    static func fancyCutCondProB7ThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7ThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutCondProB7-ThinItalic", withExtension: "otf")`
    static func fancyCutCondProB7ThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutCondProB7ThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-Bold", withExtension: "otf")`
    static func fancyCutExtProB7BoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7BoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-BoldItalic", withExtension: "otf")`
    static func fancyCutExtProB7BoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7BoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-Light", withExtension: "otf")`
    static func fancyCutExtProB7LightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7LightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-LightItalic", withExtension: "otf")`
    static func fancyCutExtProB7LightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7LightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-Medium", withExtension: "otf")`
    static func fancyCutExtProB7MediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7MediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-MediumItalic", withExtension: "otf")`
    static func fancyCutExtProB7MediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7MediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-Regular", withExtension: "otf")`
    static func fancyCutExtProB7RegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7RegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-RegularItalic", withExtension: "otf")`
    static func fancyCutExtProB7RegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7RegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-Thin", withExtension: "otf")`
    static func fancyCutExtProB7ThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7ThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutExtProB7-ThinItalic", withExtension: "otf")`
    static func fancyCutExtProB7ThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutExtProB7ThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-Bold", withExtension: "otf")`
    static func fancyCutProB7BoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7BoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-BoldItalic", withExtension: "otf")`
    static func fancyCutProB7BoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7BoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-Light", withExtension: "otf")`
    static func fancyCutProB7LightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7LightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-LightItalic", withExtension: "otf")`
    static func fancyCutProB7LightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7LightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-Medium", withExtension: "otf")`
    static func fancyCutProB7MediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7MediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-MediumItalic", withExtension: "otf")`
    static func fancyCutProB7MediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7MediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-Regular", withExtension: "otf")`
    static func fancyCutProB7RegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7RegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-RegularItalic", withExtension: "otf")`
    static func fancyCutProB7RegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7RegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-Thin", withExtension: "otf")`
    static func fancyCutProB7ThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7ThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FancyCutProB7-ThinItalic", withExtension: "otf")`
    static func fancyCutProB7ThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fancyCutProB7ThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "XCTest", withExtension: "framework")`
    static func xcTestFramework(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.xcTestFramework
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bg-dark", withExtension: "json")`
    static func bgDarkJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bgDarkJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "swiftgen", withExtension: "yml")`
    static func swiftgenYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftgenYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 36 fonts.
  struct font: Rswift.Validatable {
    /// Font `BrilliantCutProB7-Black`.
    static let brilliantCutProB7Black = Rswift.FontResource(fontName: "BrilliantCutProB7-Black")
    /// Font `BrilliantCutProB7-Bold`.
    static let brilliantCutProB7Bold = Rswift.FontResource(fontName: "BrilliantCutProB7-Bold")
    /// Font `BrilliantCutProB7-Light`.
    static let brilliantCutProB7Light = Rswift.FontResource(fontName: "BrilliantCutProB7-Light")
    /// Font `BrilliantCutProB7-Medium`.
    static let brilliantCutProB7Medium = Rswift.FontResource(fontName: "BrilliantCutProB7-Medium")
    /// Font `BrilliantCutProB7-Regular`.
    static let brilliantCutProB7Regular = Rswift.FontResource(fontName: "BrilliantCutProB7-Regular")
    /// Font `BrilliantCutProB7-Thin`.
    static let brilliantCutProB7Thin = Rswift.FontResource(fontName: "BrilliantCutProB7-Thin")
    /// Font `FancyCutCondProB7-BoldItalic`.
    static let fancyCutCondProB7BoldItalic = Rswift.FontResource(fontName: "FancyCutCondProB7-BoldItalic")
    /// Font `FancyCutCondProB7-Bold`.
    static let fancyCutCondProB7Bold = Rswift.FontResource(fontName: "FancyCutCondProB7-Bold")
    /// Font `FancyCutCondProB7-LightItalic`.
    static let fancyCutCondProB7LightItalic = Rswift.FontResource(fontName: "FancyCutCondProB7-LightItalic")
    /// Font `FancyCutCondProB7-Light`.
    static let fancyCutCondProB7Light = Rswift.FontResource(fontName: "FancyCutCondProB7-Light")
    /// Font `FancyCutCondProB7-MediumItalic`.
    static let fancyCutCondProB7MediumItalic = Rswift.FontResource(fontName: "FancyCutCondProB7-MediumItalic")
    /// Font `FancyCutCondProB7-Medium`.
    static let fancyCutCondProB7Medium = Rswift.FontResource(fontName: "FancyCutCondProB7-Medium")
    /// Font `FancyCutCondProB7-RegularItalic`.
    static let fancyCutCondProB7RegularItalic = Rswift.FontResource(fontName: "FancyCutCondProB7-RegularItalic")
    /// Font `FancyCutCondProB7-Regular`.
    static let fancyCutCondProB7Regular = Rswift.FontResource(fontName: "FancyCutCondProB7-Regular")
    /// Font `FancyCutCondProB7-ThinItalic`.
    static let fancyCutCondProB7ThinItalic = Rswift.FontResource(fontName: "FancyCutCondProB7-ThinItalic")
    /// Font `FancyCutCondProB7-Thin`.
    static let fancyCutCondProB7Thin = Rswift.FontResource(fontName: "FancyCutCondProB7-Thin")
    /// Font `FancyCutExtProB7-BoldItalic`.
    static let fancyCutExtProB7BoldItalic = Rswift.FontResource(fontName: "FancyCutExtProB7-BoldItalic")
    /// Font `FancyCutExtProB7-Bold`.
    static let fancyCutExtProB7Bold = Rswift.FontResource(fontName: "FancyCutExtProB7-Bold")
    /// Font `FancyCutExtProB7-LightItalic`.
    static let fancyCutExtProB7LightItalic = Rswift.FontResource(fontName: "FancyCutExtProB7-LightItalic")
    /// Font `FancyCutExtProB7-Light`.
    static let fancyCutExtProB7Light = Rswift.FontResource(fontName: "FancyCutExtProB7-Light")
    /// Font `FancyCutExtProB7-MediumItalic`.
    static let fancyCutExtProB7MediumItalic = Rswift.FontResource(fontName: "FancyCutExtProB7-MediumItalic")
    /// Font `FancyCutExtProB7-Medium`.
    static let fancyCutExtProB7Medium = Rswift.FontResource(fontName: "FancyCutExtProB7-Medium")
    /// Font `FancyCutExtProB7-RegularItalic`.
    static let fancyCutExtProB7RegularItalic = Rswift.FontResource(fontName: "FancyCutExtProB7-RegularItalic")
    /// Font `FancyCutExtProB7-Regular`.
    static let fancyCutExtProB7Regular = Rswift.FontResource(fontName: "FancyCutExtProB7-Regular")
    /// Font `FancyCutExtProB7-ThinItalic`.
    static let fancyCutExtProB7ThinItalic = Rswift.FontResource(fontName: "FancyCutExtProB7-ThinItalic")
    /// Font `FancyCutExtProB7-Thin`.
    static let fancyCutExtProB7Thin = Rswift.FontResource(fontName: "FancyCutExtProB7-Thin")
    /// Font `FancyCutProB7-BoldItalic`.
    static let fancyCutProB7BoldItalic = Rswift.FontResource(fontName: "FancyCutProB7-BoldItalic")
    /// Font `FancyCutProB7-Bold`.
    static let fancyCutProB7Bold = Rswift.FontResource(fontName: "FancyCutProB7-Bold")
    /// Font `FancyCutProB7-LightItalic`.
    static let fancyCutProB7LightItalic = Rswift.FontResource(fontName: "FancyCutProB7-LightItalic")
    /// Font `FancyCutProB7-Light`.
    static let fancyCutProB7Light = Rswift.FontResource(fontName: "FancyCutProB7-Light")
    /// Font `FancyCutProB7-MediumItalic`.
    static let fancyCutProB7MediumItalic = Rswift.FontResource(fontName: "FancyCutProB7-MediumItalic")
    /// Font `FancyCutProB7-Medium`.
    static let fancyCutProB7Medium = Rswift.FontResource(fontName: "FancyCutProB7-Medium")
    /// Font `FancyCutProB7-RegularItalic`.
    static let fancyCutProB7RegularItalic = Rswift.FontResource(fontName: "FancyCutProB7-RegularItalic")
    /// Font `FancyCutProB7-Regular`.
    static let fancyCutProB7Regular = Rswift.FontResource(fontName: "FancyCutProB7-Regular")
    /// Font `FancyCutProB7-ThinItalic`.
    static let fancyCutProB7ThinItalic = Rswift.FontResource(fontName: "FancyCutProB7-ThinItalic")
    /// Font `FancyCutProB7-Thin`.
    static let fancyCutProB7Thin = Rswift.FontResource(fontName: "FancyCutProB7-Thin")

    /// `UIFont(name: "BrilliantCutProB7-Black", size: ...)`
    static func brilliantCutProB7Black(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brilliantCutProB7Black, size: size)
    }

    /// `UIFont(name: "BrilliantCutProB7-Bold", size: ...)`
    static func brilliantCutProB7Bold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brilliantCutProB7Bold, size: size)
    }

    /// `UIFont(name: "BrilliantCutProB7-Light", size: ...)`
    static func brilliantCutProB7Light(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brilliantCutProB7Light, size: size)
    }

    /// `UIFont(name: "BrilliantCutProB7-Medium", size: ...)`
    static func brilliantCutProB7Medium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brilliantCutProB7Medium, size: size)
    }

    /// `UIFont(name: "BrilliantCutProB7-Regular", size: ...)`
    static func brilliantCutProB7Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brilliantCutProB7Regular, size: size)
    }

    /// `UIFont(name: "BrilliantCutProB7-Thin", size: ...)`
    static func brilliantCutProB7Thin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brilliantCutProB7Thin, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-Bold", size: ...)`
    static func fancyCutCondProB7Bold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7Bold, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-BoldItalic", size: ...)`
    static func fancyCutCondProB7BoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7BoldItalic, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-Light", size: ...)`
    static func fancyCutCondProB7Light(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7Light, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-LightItalic", size: ...)`
    static func fancyCutCondProB7LightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7LightItalic, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-Medium", size: ...)`
    static func fancyCutCondProB7Medium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7Medium, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-MediumItalic", size: ...)`
    static func fancyCutCondProB7MediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7MediumItalic, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-Regular", size: ...)`
    static func fancyCutCondProB7Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7Regular, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-RegularItalic", size: ...)`
    static func fancyCutCondProB7RegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7RegularItalic, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-Thin", size: ...)`
    static func fancyCutCondProB7Thin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7Thin, size: size)
    }

    /// `UIFont(name: "FancyCutCondProB7-ThinItalic", size: ...)`
    static func fancyCutCondProB7ThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutCondProB7ThinItalic, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-Bold", size: ...)`
    static func fancyCutExtProB7Bold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7Bold, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-BoldItalic", size: ...)`
    static func fancyCutExtProB7BoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7BoldItalic, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-Light", size: ...)`
    static func fancyCutExtProB7Light(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7Light, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-LightItalic", size: ...)`
    static func fancyCutExtProB7LightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7LightItalic, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-Medium", size: ...)`
    static func fancyCutExtProB7Medium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7Medium, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-MediumItalic", size: ...)`
    static func fancyCutExtProB7MediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7MediumItalic, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-Regular", size: ...)`
    static func fancyCutExtProB7Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7Regular, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-RegularItalic", size: ...)`
    static func fancyCutExtProB7RegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7RegularItalic, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-Thin", size: ...)`
    static func fancyCutExtProB7Thin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7Thin, size: size)
    }

    /// `UIFont(name: "FancyCutExtProB7-ThinItalic", size: ...)`
    static func fancyCutExtProB7ThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutExtProB7ThinItalic, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-Bold", size: ...)`
    static func fancyCutProB7Bold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7Bold, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-BoldItalic", size: ...)`
    static func fancyCutProB7BoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7BoldItalic, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-Light", size: ...)`
    static func fancyCutProB7Light(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7Light, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-LightItalic", size: ...)`
    static func fancyCutProB7LightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7LightItalic, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-Medium", size: ...)`
    static func fancyCutProB7Medium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7Medium, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-MediumItalic", size: ...)`
    static func fancyCutProB7MediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7MediumItalic, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-Regular", size: ...)`
    static func fancyCutProB7Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7Regular, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-RegularItalic", size: ...)`
    static func fancyCutProB7RegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7RegularItalic, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-Thin", size: ...)`
    static func fancyCutProB7Thin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7Thin, size: size)
    }

    /// `UIFont(name: "FancyCutProB7-ThinItalic", size: ...)`
    static func fancyCutProB7ThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fancyCutProB7ThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.brilliantCutProB7Black(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrilliantCutProB7-Black' could not be loaded, is 'BrilliantCutProB7-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brilliantCutProB7Bold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrilliantCutProB7-Bold' could not be loaded, is 'BrilliantCutProB7-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brilliantCutProB7Light(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrilliantCutProB7-Light' could not be loaded, is 'BrilliantCutProB7-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brilliantCutProB7Medium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrilliantCutProB7-Medium' could not be loaded, is 'BrilliantCutProB7-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brilliantCutProB7Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrilliantCutProB7-Regular' could not be loaded, is 'BrilliantCutProB7-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brilliantCutProB7Thin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrilliantCutProB7-Thin' could not be loaded, is 'BrilliantCutProB7-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7Bold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-Bold' could not be loaded, is 'FancyCutCondProB7-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7BoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-BoldItalic' could not be loaded, is 'FancyCutCondProB7-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7Light(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-Light' could not be loaded, is 'FancyCutCondProB7-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7LightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-LightItalic' could not be loaded, is 'FancyCutCondProB7-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7Medium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-Medium' could not be loaded, is 'FancyCutCondProB7-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7MediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-MediumItalic' could not be loaded, is 'FancyCutCondProB7-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-Regular' could not be loaded, is 'FancyCutCondProB7-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7RegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-RegularItalic' could not be loaded, is 'FancyCutCondProB7-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7Thin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-Thin' could not be loaded, is 'FancyCutCondProB7-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutCondProB7ThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutCondProB7-ThinItalic' could not be loaded, is 'FancyCutCondProB7-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7Bold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-Bold' could not be loaded, is 'FancyCutExtProB7-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7BoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-BoldItalic' could not be loaded, is 'FancyCutExtProB7-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7Light(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-Light' could not be loaded, is 'FancyCutExtProB7-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7LightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-LightItalic' could not be loaded, is 'FancyCutExtProB7-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7Medium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-Medium' could not be loaded, is 'FancyCutExtProB7-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7MediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-MediumItalic' could not be loaded, is 'FancyCutExtProB7-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-Regular' could not be loaded, is 'FancyCutExtProB7-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7RegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-RegularItalic' could not be loaded, is 'FancyCutExtProB7-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7Thin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-Thin' could not be loaded, is 'FancyCutExtProB7-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutExtProB7ThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutExtProB7-ThinItalic' could not be loaded, is 'FancyCutExtProB7-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7Bold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-Bold' could not be loaded, is 'FancyCutProB7-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7BoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-BoldItalic' could not be loaded, is 'FancyCutProB7-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7Light(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-Light' could not be loaded, is 'FancyCutProB7-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7LightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-LightItalic' could not be loaded, is 'FancyCutProB7-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7Medium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-Medium' could not be loaded, is 'FancyCutProB7-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7MediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-MediumItalic' could not be loaded, is 'FancyCutProB7-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-Regular' could not be loaded, is 'FancyCutProB7-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7RegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-RegularItalic' could not be loaded, is 'FancyCutProB7-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7Thin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-Thin' could not be loaded, is 'FancyCutProB7-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fancyCutProB7ThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FancyCutProB7-ThinItalic' could not be loaded, is 'FancyCutProB7-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 95 images.
  struct image {
    /// Image `Feat`.
    static let feat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Feat")
    /// Image `icon-black-add-curate`.
    static let iconBlackAddCurate = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-add-curate")
    /// Image `icon-black-add-takeaway`.
    static let iconBlackAddTakeaway = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-add-takeaway")
    /// Image `icon-black-add`.
    static let iconBlackAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-add")
    /// Image `icon-black-arrow-accordion-down-disabled`.
    static let iconBlackArrowAccordionDownDisabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-arrow-accordion-down-disabled")
    /// Image `icon-black-arrow-accordion-down`.
    static let iconBlackArrowAccordionDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-arrow-accordion-down")
    /// Image `icon-black-arrow-accordion-up`.
    static let iconBlackArrowAccordionUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-arrow-accordion-up")
    /// Image `icon-black-arrow-left`.
    static let iconBlackArrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-arrow-left")
    /// Image `icon-black-arrow-right`.
    static let iconBlackArrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-arrow-right")
    /// Image `icon-black-bold-close`.
    static let iconBlackBoldClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-bold-close")
    /// Image `icon-black-bookmark-small`.
    static let iconBlackBookmarkSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-bookmark-small")
    /// Image `icon-black-bookmark`.
    static let iconBlackBookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-bookmark")
    /// Image `icon-black-close-takeaway`.
    static let iconBlackCloseTakeaway = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-close-takeaway")
    /// Image `icon-black-close`.
    static let iconBlackClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-close")
    /// Image `icon-black-download`.
    static let iconBlackDownload = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-download")
    /// Image `icon-black-error`.
    static let iconBlackError = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-error")
    /// Image `icon-black-external-link`.
    static let iconBlackExternalLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-external-link")
    /// Image `icon-black-eye`.
    static let iconBlackEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-eye")
    /// Image `icon-black-find-boutique`.
    static let iconBlackFindBoutique = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-find-boutique")
    /// Image `icon-black-image`.
    static let iconBlackImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-image")
    /// Image `icon-black-logout`.
    static let iconBlackLogout = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-logout")
    /// Image `icon-black-pencil`.
    static let iconBlackPencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-pencil")
    /// Image `icon-black-profile`.
    static let iconBlackProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-profile")
    /// Image `icon-black-remove`.
    static let iconBlackRemove = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-remove")
    /// Image `icon-black-resources`.
    static let iconBlackResources = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-resources")
    /// Image `icon-black-search-curate-disabled`.
    static let iconBlackSearchCurateDisabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-search-curate-disabled")
    /// Image `icon-black-search-curate`.
    static let iconBlackSearchCurate = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-search-curate")
    /// Image `icon-black-search`.
    static let iconBlackSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-search")
    /// Image `icon-black-star`.
    static let iconBlackStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-star")
    /// Image `icon-black-trash`.
    static let iconBlackTrash = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-black-trash")
    /// Image `icon-bookmark`.
    static let iconBookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-bookmark")
    /// Image `icon-field-validation-error`.
    static let iconFieldValidationError = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-field-validation-error")
    /// Image `icon-field-validation-info`.
    static let iconFieldValidationInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-field-validation-info")
    /// Image `icon-gray-delete`.
    static let iconGrayDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-gray-delete")
    /// Image `icon-red-error`.
    static let iconRedError = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-red-error")
    /// Image `icon-red-right-triangle`.
    static let iconRedRightTriangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-red-right-triangle")
    /// Image `icon-search-textfield-close-white`.
    static let iconSearchTextfieldCloseWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-search-textfield-close-white")
    /// Image `icon-search-textfield-close`.
    static let iconSearchTextfieldClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-search-textfield-close")
    /// Image `icon-white-add-curate`.
    static let iconWhiteAddCurate = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-add-curate")
    /// Image `icon-white-add-takeaway`.
    static let iconWhiteAddTakeaway = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-add-takeaway")
    /// Image `icon-white-arrow-accordion-down`.
    static let iconWhiteArrowAccordionDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-arrow-accordion-down")
    /// Image `icon-white-arrow-accordion-up`.
    static let iconWhiteArrowAccordionUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-arrow-accordion-up")
    /// Image `icon-white-arrow-left`.
    static let iconWhiteArrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-arrow-left")
    /// Image `icon-white-arrow-right`.
    static let iconWhiteArrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-arrow-right")
    /// Image `icon-white-bookmark-small`.
    static let iconWhiteBookmarkSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-bookmark-small")
    /// Image `icon-white-bookmark`.
    static let iconWhiteBookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-bookmark")
    /// Image `icon-white-close`.
    static let iconWhiteClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-close")
    /// Image `icon-white-delete-disabled`.
    static let iconWhiteDeleteDisabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-delete-disabled")
    /// Image `icon-white-delete`.
    static let iconWhiteDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-delete")
    /// Image `icon-white-download`.
    static let iconWhiteDownload = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-download")
    /// Image `icon-white-error`.
    static let iconWhiteError = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-error")
    /// Image `icon-white-external-link`.
    static let iconWhiteExternalLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-external-link")
    /// Image `icon-white-eye`.
    static let iconWhiteEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-eye")
    /// Image `icon-white-find-boutique`.
    static let iconWhiteFindBoutique = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-find-boutique")
    /// Image `icon-white-image`.
    static let iconWhiteImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-image")
    /// Image `icon-white-profile`.
    static let iconWhiteProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-profile")
    /// Image `icon-white-remove`.
    static let iconWhiteRemove = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-remove")
    /// Image `icon-white-resources`.
    static let iconWhiteResources = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-resources")
    /// Image `icon-white-search`.
    static let iconWhiteSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-search")
    /// Image `icon-white-star`.
    static let iconWhiteStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-star")
    /// Image `icon-white-white-add`.
    static let iconWhiteWhiteAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-white-white-add")
    /// Image `img-asset-gradient`.
    static let imgAssetGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-asset-gradient")
    /// Image `img-asset-hero`.
    static let imgAssetHero = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-asset-hero")
    /// Image `img-atlas`.
    static let imgAtlas = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-atlas")
    /// Image `img-black-cutoff`.
    static let imgBlackCutoff = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-black-cutoff")
    /// Image `img-black-vertical-rectangle`.
    static let imgBlackVerticalRectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-black-vertical-rectangle")
    /// Image `img-button-back-black`.
    static let imgButtonBackBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-button-back-black")
    /// Image `img-button-back`.
    static let imgButtonBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-button-back")
    /// Image `img-cartier-atlas-logo`.
    static let imgCartierAtlasLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-cartier-atlas-logo")
    /// Image `img-endBrief-background`.
    static let imgEndBriefBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-endBrief-background")
    /// Image `img-featured-asset-default`.
    static let imgFeaturedAssetDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-featured-asset-default")
    /// Image `img-gold-hexagon-view`.
    static let imgGoldHexagonView = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-gold-hexagon-view")
    /// Image `img-gold-hexagon`.
    static let imgGoldHexagon = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-gold-hexagon")
    /// Image `img-gold-pdf`.
    static let imgGoldPdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-gold-pdf")
    /// Image `img-gold-swipe-arrows-right`.
    static let imgGoldSwipeArrowsRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-gold-swipe-arrows-right")
    /// Image `img-gold-takeaway`.
    static let imgGoldTakeaway = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-gold-takeaway")
    /// Image `img-gray-background`.
    static let imgGrayBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-gray-background")
    /// Image `img-linear-gradient`.
    static let imgLinearGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-linear-gradient")
    /// Image `img-login-artifact-1`.
    static let imgLoginArtifact1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-login-artifact-1")
    /// Image `img-login-artifact-2`.
    static let imgLoginArtifact2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-login-artifact-2")
    /// Image `img-login-artifact-3`.
    static let imgLoginArtifact3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-login-artifact-3")
    /// Image `img-logo-cartier`.
    static let imgLogoCartier = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-logo-cartier")
    /// Image `img-pattern-brief`.
    static let imgPatternBrief = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-pattern-brief")
    /// Image `img-pattern-immersive`.
    static let imgPatternImmersive = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-pattern-immersive")
    /// Image `img-polygon-nav-resources`.
    static let imgPolygonNavResources = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-polygon-nav-resources")
    /// Image `img-polygon-resources`.
    static let imgPolygonResources = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-polygon-resources")
    /// Image `img-profile-background`.
    static let imgProfileBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-profile-background")
    /// Image `img-quote`.
    static let imgQuote = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-quote")
    /// Image `img-red-arrows`.
    static let imgRedArrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-red-arrows")
    /// Image `img-red-big-hexagon`.
    static let imgRedBigHexagon = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-red-big-hexagon")
    /// Image `img-red-box-2`.
    static let imgRedBox2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-red-box-2")
    /// Image `img-red-hexagon`.
    static let imgRedHexagon = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-red-hexagon")
    /// Image `img-top-gradient`.
    static let imgTopGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-top-gradient")
    /// Image `img-white-triangle`.
    static let imgWhiteTriangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "img-white-triangle")
    /// Image `img_gold_cheetah`.
    static let img_gold_cheetah = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_gold_cheetah")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Feat", bundle: ..., traitCollection: ...)`
    static func feat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-add", bundle: ..., traitCollection: ...)`
    static func iconBlackAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-add-curate", bundle: ..., traitCollection: ...)`
    static func iconBlackAddCurate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackAddCurate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-add-takeaway", bundle: ..., traitCollection: ...)`
    static func iconBlackAddTakeaway(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackAddTakeaway, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-arrow-accordion-down", bundle: ..., traitCollection: ...)`
    static func iconBlackArrowAccordionDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackArrowAccordionDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-arrow-accordion-down-disabled", bundle: ..., traitCollection: ...)`
    static func iconBlackArrowAccordionDownDisabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackArrowAccordionDownDisabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-arrow-accordion-up", bundle: ..., traitCollection: ...)`
    static func iconBlackArrowAccordionUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackArrowAccordionUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-arrow-left", bundle: ..., traitCollection: ...)`
    static func iconBlackArrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackArrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-arrow-right", bundle: ..., traitCollection: ...)`
    static func iconBlackArrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackArrowRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-bold-close", bundle: ..., traitCollection: ...)`
    static func iconBlackBoldClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackBoldClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-bookmark", bundle: ..., traitCollection: ...)`
    static func iconBlackBookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackBookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-bookmark-small", bundle: ..., traitCollection: ...)`
    static func iconBlackBookmarkSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackBookmarkSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-close", bundle: ..., traitCollection: ...)`
    static func iconBlackClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-close-takeaway", bundle: ..., traitCollection: ...)`
    static func iconBlackCloseTakeaway(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackCloseTakeaway, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-download", bundle: ..., traitCollection: ...)`
    static func iconBlackDownload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackDownload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-error", bundle: ..., traitCollection: ...)`
    static func iconBlackError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-external-link", bundle: ..., traitCollection: ...)`
    static func iconBlackExternalLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackExternalLink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-eye", bundle: ..., traitCollection: ...)`
    static func iconBlackEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-find-boutique", bundle: ..., traitCollection: ...)`
    static func iconBlackFindBoutique(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackFindBoutique, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-image", bundle: ..., traitCollection: ...)`
    static func iconBlackImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-logout", bundle: ..., traitCollection: ...)`
    static func iconBlackLogout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackLogout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-pencil", bundle: ..., traitCollection: ...)`
    static func iconBlackPencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackPencil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-profile", bundle: ..., traitCollection: ...)`
    static func iconBlackProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-remove", bundle: ..., traitCollection: ...)`
    static func iconBlackRemove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackRemove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-resources", bundle: ..., traitCollection: ...)`
    static func iconBlackResources(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackResources, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-search", bundle: ..., traitCollection: ...)`
    static func iconBlackSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-search-curate", bundle: ..., traitCollection: ...)`
    static func iconBlackSearchCurate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackSearchCurate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-search-curate-disabled", bundle: ..., traitCollection: ...)`
    static func iconBlackSearchCurateDisabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackSearchCurateDisabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-star", bundle: ..., traitCollection: ...)`
    static func iconBlackStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-black-trash", bundle: ..., traitCollection: ...)`
    static func iconBlackTrash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlackTrash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-bookmark", bundle: ..., traitCollection: ...)`
    static func iconBookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-field-validation-error", bundle: ..., traitCollection: ...)`
    static func iconFieldValidationError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconFieldValidationError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-field-validation-info", bundle: ..., traitCollection: ...)`
    static func iconFieldValidationInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconFieldValidationInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-gray-delete", bundle: ..., traitCollection: ...)`
    static func iconGrayDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGrayDelete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-red-error", bundle: ..., traitCollection: ...)`
    static func iconRedError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRedError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-red-right-triangle", bundle: ..., traitCollection: ...)`
    static func iconRedRightTriangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRedRightTriangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-search-textfield-close", bundle: ..., traitCollection: ...)`
    static func iconSearchTextfieldClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearchTextfieldClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-search-textfield-close-white", bundle: ..., traitCollection: ...)`
    static func iconSearchTextfieldCloseWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearchTextfieldCloseWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-add-curate", bundle: ..., traitCollection: ...)`
    static func iconWhiteAddCurate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteAddCurate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-add-takeaway", bundle: ..., traitCollection: ...)`
    static func iconWhiteAddTakeaway(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteAddTakeaway, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-arrow-accordion-down", bundle: ..., traitCollection: ...)`
    static func iconWhiteArrowAccordionDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteArrowAccordionDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-arrow-accordion-up", bundle: ..., traitCollection: ...)`
    static func iconWhiteArrowAccordionUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteArrowAccordionUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-arrow-left", bundle: ..., traitCollection: ...)`
    static func iconWhiteArrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteArrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-arrow-right", bundle: ..., traitCollection: ...)`
    static func iconWhiteArrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteArrowRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-bookmark", bundle: ..., traitCollection: ...)`
    static func iconWhiteBookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteBookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-bookmark-small", bundle: ..., traitCollection: ...)`
    static func iconWhiteBookmarkSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteBookmarkSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-close", bundle: ..., traitCollection: ...)`
    static func iconWhiteClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-delete", bundle: ..., traitCollection: ...)`
    static func iconWhiteDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteDelete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-delete-disabled", bundle: ..., traitCollection: ...)`
    static func iconWhiteDeleteDisabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteDeleteDisabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-download", bundle: ..., traitCollection: ...)`
    static func iconWhiteDownload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteDownload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-error", bundle: ..., traitCollection: ...)`
    static func iconWhiteError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-external-link", bundle: ..., traitCollection: ...)`
    static func iconWhiteExternalLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteExternalLink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-eye", bundle: ..., traitCollection: ...)`
    static func iconWhiteEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-find-boutique", bundle: ..., traitCollection: ...)`
    static func iconWhiteFindBoutique(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteFindBoutique, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-image", bundle: ..., traitCollection: ...)`
    static func iconWhiteImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-profile", bundle: ..., traitCollection: ...)`
    static func iconWhiteProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-remove", bundle: ..., traitCollection: ...)`
    static func iconWhiteRemove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteRemove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-resources", bundle: ..., traitCollection: ...)`
    static func iconWhiteResources(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteResources, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-search", bundle: ..., traitCollection: ...)`
    static func iconWhiteSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-star", bundle: ..., traitCollection: ...)`
    static func iconWhiteStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-white-white-add", bundle: ..., traitCollection: ...)`
    static func iconWhiteWhiteAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWhiteWhiteAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-asset-gradient", bundle: ..., traitCollection: ...)`
    static func imgAssetGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgAssetGradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-asset-hero", bundle: ..., traitCollection: ...)`
    static func imgAssetHero(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgAssetHero, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-atlas", bundle: ..., traitCollection: ...)`
    static func imgAtlas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgAtlas, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-black-cutoff", bundle: ..., traitCollection: ...)`
    static func imgBlackCutoff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgBlackCutoff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-black-vertical-rectangle", bundle: ..., traitCollection: ...)`
    static func imgBlackVerticalRectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgBlackVerticalRectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-button-back", bundle: ..., traitCollection: ...)`
    static func imgButtonBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgButtonBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-button-back-black", bundle: ..., traitCollection: ...)`
    static func imgButtonBackBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgButtonBackBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-cartier-atlas-logo", bundle: ..., traitCollection: ...)`
    static func imgCartierAtlasLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgCartierAtlasLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-endBrief-background", bundle: ..., traitCollection: ...)`
    static func imgEndBriefBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgEndBriefBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-featured-asset-default", bundle: ..., traitCollection: ...)`
    static func imgFeaturedAssetDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgFeaturedAssetDefault, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-gold-hexagon", bundle: ..., traitCollection: ...)`
    static func imgGoldHexagon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgGoldHexagon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-gold-hexagon-view", bundle: ..., traitCollection: ...)`
    static func imgGoldHexagonView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgGoldHexagonView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-gold-pdf", bundle: ..., traitCollection: ...)`
    static func imgGoldPdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgGoldPdf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-gold-swipe-arrows-right", bundle: ..., traitCollection: ...)`
    static func imgGoldSwipeArrowsRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgGoldSwipeArrowsRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-gold-takeaway", bundle: ..., traitCollection: ...)`
    static func imgGoldTakeaway(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgGoldTakeaway, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-gray-background", bundle: ..., traitCollection: ...)`
    static func imgGrayBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgGrayBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-linear-gradient", bundle: ..., traitCollection: ...)`
    static func imgLinearGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgLinearGradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-login-artifact-1", bundle: ..., traitCollection: ...)`
    static func imgLoginArtifact1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgLoginArtifact1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-login-artifact-2", bundle: ..., traitCollection: ...)`
    static func imgLoginArtifact2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgLoginArtifact2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-login-artifact-3", bundle: ..., traitCollection: ...)`
    static func imgLoginArtifact3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgLoginArtifact3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-logo-cartier", bundle: ..., traitCollection: ...)`
    static func imgLogoCartier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgLogoCartier, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-pattern-brief", bundle: ..., traitCollection: ...)`
    static func imgPatternBrief(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgPatternBrief, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-pattern-immersive", bundle: ..., traitCollection: ...)`
    static func imgPatternImmersive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgPatternImmersive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-polygon-nav-resources", bundle: ..., traitCollection: ...)`
    static func imgPolygonNavResources(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgPolygonNavResources, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-polygon-resources", bundle: ..., traitCollection: ...)`
    static func imgPolygonResources(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgPolygonResources, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-profile-background", bundle: ..., traitCollection: ...)`
    static func imgProfileBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgProfileBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-quote", bundle: ..., traitCollection: ...)`
    static func imgQuote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgQuote, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-red-arrows", bundle: ..., traitCollection: ...)`
    static func imgRedArrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgRedArrows, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-red-big-hexagon", bundle: ..., traitCollection: ...)`
    static func imgRedBigHexagon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgRedBigHexagon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-red-box-2", bundle: ..., traitCollection: ...)`
    static func imgRedBox2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgRedBox2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-red-hexagon", bundle: ..., traitCollection: ...)`
    static func imgRedHexagon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgRedHexagon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-top-gradient", bundle: ..., traitCollection: ...)`
    static func imgTopGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgTopGradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img-white-triangle", bundle: ..., traitCollection: ...)`
    static func imgWhiteTriangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imgWhiteTriangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_gold_cheetah", bundle: ..., traitCollection: ...)`
    static func img_gold_cheetah(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_gold_cheetah, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 1 localization keys.
    struct localizable {
      /// en translation: init has not been implemented
      ///
      /// Locales: en
      static let generalInitError = Rswift.StringResource(key: "general.init.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: init has not been implemented
      ///
      /// Locales: en
      static func generalInitError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.init.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.init.error"
        }

        return NSLocalizedString("general.init.error", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
